datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  username       String?
  accounts       Account[]
  sessions       Session[]
  historySummary HistorySummary?
  history        History[]
  timezone       Int             @default(7)
}

model HistorySummary {
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  id            Int    @id @default(autoincrement())
  countTrain    Int
  sumPoint      Int
  sumTrue       Int
  sumFalse      Int
  sumTimeSecond Int
}

model History {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  id         Int      @id @default(autoincrement())
  point      Int
  countTrue  Int
  countFalse Int
  timeSecond Int
  createdAt  DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
